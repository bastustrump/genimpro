<!DOCTYPE html>
<meta charset="utf-8">
<link href="http://fonts.googleapis.com/css?family=Lato:300,400,700,300italic,400italic" rel="stylesheet" type="text/css">
<link href="http://fonts.googleapis.com/css?family=Raleway:400,300,700" rel="stylesheet" type="text/css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
<script src="d3.v4.min.js"></script>
<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
<!-- Optional theme -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">
<!-- Latest compiled and minified JavaScript -->
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>

<title>GENIMPRO</title>

<style>
body {
    overflow: hidden;
    background-color: rgb(20, 20, 20);
    font-family: Lato, Helvetica, Arial, sans-serif;
    font-weight: 200;
}

.currentTime line {
    stroke: red;
    fill: none;
}

.links path {
    stroke: #999;
    fill: none;
}

.nodes circle {
    stroke: rgb(20, 20, 20);
    stroke-width: 2.0px;
}

.nodes text {
    pointer-events: none;
    font: 12px sans-serif;
}

.axis path,
.axis line {
    fill: none;
    stroke: white;
    shape-rendering: crispEdges;
}

.axis {
    font: 10px Lato, Helvetica, Arial, sans-serif;
    fill: white;
}

.dropdown-menu {
    font-size: 11px;
    max-height: 400px;
    overflow: hidden;
    overflow-y: auto;
}
</style>

<body>
    <nav class="navbar navbar-default">
        <div class="container-fluid">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header">
                <a class="navbar-brand disabled" href="#">
                  <span class="glyphicon glyphicon-equalizer" aria-hidden="true"></span> GENIMPRO</a>
                <div class="navbar-left btn-group" role="group" aria-label="...">
                    <button class="btn btn-default navbar-btn" id="toggleVisTree" onclick="toggleVis(false)"><span class="glyphicon glyphicon-grain" aria-hidden="true"></span></button>
                    <button class="btn btn-default navbar-btn" id="toggleVisAligned" onclick="toggleVis(true)"><span class="glyphicon glyphicon-align-left" aria-hidden="true"></span></button>
                </div>
                <ul class="nav navbar-nav">
                    <li class="dropdown disabled">
                        <a href="#" id="recordingButton" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">Recording <span class="caret"></span></a>
                        <ul class="dropdown-menu multi-column columns-2" role="menu" id="recordingSelector"></ul>
                    </li>
                </ul>
                <p class="navbar-text" id="navbarTitle">
                    <audio controls=controls id="audioElement" style="width:600px"></audio>
                </p>
            </div>
            <form class="navbar-form navbar-right" role="search">
                <div class="form-group">
                    <input type="text" class="form-control" placeholder="Search">
                </div>
                <button type="submit" class="btn btn-default disabled"><span class="glyphicon glyphicon-search" aria-hidden="true"></span></button>
            </form>

        </div>
        <!-- /.navbar-collapse -->
        </div>
        <!-- /.container-fluid -->
    </nav>
    <svg width="1300" height="1000"></svg>
</body>
<script>

var currentGraph = {}, fullGraph = {};


$("#recordingSelector").on("click", "li", function(event) {
    var recordingID = d3.select(this).attr("recordingID");
    $("#recordingButton").html($(this).find('a').text() + ' <span class="caret"></span>');
    loadRecording(recordingID);

    $.get("http://0.0.0.0:8080/audioForRecording/" + recordingID, function(data) {
        var element;
        if (data.substring(0, 6) == "<audio") {
            element = data.substring(27, data.length - 8);
        } else {
            element = data;
        }

        $("#audioElement").html(element);
        $("#audioElement").load();

    });

})


d3.json("http://0.0.0.0:8080/recordings", function(error, recordings) {

    var recordingSelector = d3.select("#recordingSelector");
    //recordings = recordings.slice(150, 260);
    var recordingLi = recordingSelector.selectAll("li").data(recordings);

    recordingLi.attr("recordingID", function(d, i) {
            return recordings[i]["ID"];
        })
        .attr("role", "presentation");

    recordingLi.exit().remove();
    recordingLi.enter().append("li")
        .attr("recordingID", function(d, i) {
            return recordings[i]["ID"];
        })
        .append("a")
        .attr("role", "menuitem")
        .attr("tabindex", "-1")
        .attr("href", "#")
        .text(function(d, i) {
            return "Recording: " + recordings[i]["ID"];
        });

    $('#recordingButton').removeClass('disabled');
    $('#recordingButton').parent().removeClass('disabled');
});

var margin = {
    top: 10,
    right: 20,
    bottom: 10,
    left: 10
};

var audio = document.getElementById('audioElement');

$(window).keyup(function(e) {
    if (e.keyCode === 32) {
        if (audio.paused == true)
            audio.play();
        else
            audio.pause();
    }
});

var lastCall = 0;

audio.addEventListener("timeupdate", function(e) {
    currentTime //.transition().duration(10)
        .attr("x1", function(d) {
            return x(new Date(+audio.currentTime * 1000));
        })
        .attr("y1", function(d) {
            return 0;
        })
        .attr("x2", function(d) {
            return x(new Date(+audio.currentTime * 1000));
        })
        .attr("y2", function(d) {
            return height - axisHeight - 30;
        });

    partGraph(audio.currentTime);
}, false);

// audio.addEventListener("playing", function(e){
//   if (AlignActivated) {
//     currentTime.transition().duration(100).style("opacity", 1);
//   }
// });

// audio.addEventListener("pause", function(e){
//   currentTime.transition().duration(100)
//     .style("opacity", 0);
// });



var svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height"),
    radius = 7;


var currentTime = svg.append("g")
    .attr("class", "currentTime")
    .append("line")
    .style("opacity", 0);

var soundcellVis = svg.append("g");


var color = d3.scaleOrdinal(d3.schemeCategory20);


var alphaTarget = 0.7;

var x = d3.scaleTime(); //.range([margin.left, width-margin.right]);

var axisHeight = 35;
var xAxis = d3.axisBottom(x)
    .tickFormat(d3.timeFormat("%M:%S"));

var xAxisVis = svg.append("g")
    .attr("class", "axis")
    .attr("transform", "translate(0," + (height - 100) + ")")
    .style("opacity", "0")
    .call(xAxis);


//Forces
var forceX = d3.forceX(function(d) {
    return x(d.startTime);
}).strength(function(d) {
    return 0.8;
});

var forceY = d3.forceY(function(d) {

    maxHeight = height - axisHeight;
    lineageHeight = 3.1 * radius;

    if (d.group == 1) {
        lineage = maxLineages - d.lineage;
        baseline = maxHeight / 2 - maxLineages * lineageHeight - lineageHeight / 2 - 0.15 * maxHeight; //4*lineageHeight;
    } else {
        baseline = maxHeight / 2 - (maxLineages * lineageHeight) / 2 + 0.15 * maxHeight;
        lineage = d.lineage;
    }
    shift = lineage * lineageHeight;
    return baseline + shift;
});

var forceCharge = d3.forceManyBody()
    .distanceMax(100)
    .distanceMin(30)
    .strength(function(d) {
        return -20;
    });

var forceCenter = d3.forceCenter(width / 2, height / 2);

var simulation = d3.forceSimulation()
    .force("link", d3.forceLink().id(function(d) {
        return d.id;
    }));


simulation.force("link").strength(0.8)
    .distance(function(d) {

        if (d.distance) {
            return d.distance * 15.0;
        } else {
            return 30;
        }
    });

simulation.force("charge", forceCharge)
    .force("center", forceCenter)
    .force("collide", d3.forceCollide(nodeRadius))
    .alphaTarget(alphaTarget)
    .on("tick", ticked);



var AlignActivated = false;

function toggleVis(toggleAlign) {

    if (!toggleAlign) {

        simulation.force("forceY", null);
        simulation.force("forceX", null);
        simulation.force("charge", forceCharge);
        simulation.force("center", forceCenter);
        simulation.force("link").strength(0.8);
        AlignActivated = false;

        currentTime.transition().duration(100).style("opacity", 0);

        xAxisVis.transition()
            .duration(150).style("opacity", "0");

    } else {

        simulation.force("link").strength(0.001);
        simulation.force("charge", null);
        simulation.force("center", null);
        simulation.force("forceY", forceY);
        simulation.force("forceX", forceX);

        simulation.force("forceX")
            .strength(function(d) {
                return 0.9;
            });

        simulation.force("forceY")
            .strength(function(d) {
                return 0.8;
            });

        xAxisVis.transition()
            .duration(550).style("opacity", "1");

        currentTime.transition().duration(100).style("opacity", 1);
        AlignActivated = true;
    }
}


var maxDuration;

function nodeRadius(d) {
    var nodeRadius = radius + 18.5 * d.duration / maxDuration;
    if (d.group == 1) {
        return nodeRadius -2;
    } else {
        return nodeRadius;
    }
}


function loadRecording(recordingID) {
    d3.json("http://0.0.0.0:8080/genetics/" + recordingID, function(error, treeData) {
        toggleVis(false);
        fullGraph = treeData;
        loadGraph(fullGraph);
    });
}

function loadGraph(graph) {
    
    var lineages = graph.nodes.map(function(obj) {
        return obj.lineage;
    });
    maxLineages = Math.max(...lineages) + 1;

    graph.nodes.forEach(function(d) {
        d.endTime = new Date(+(d.startTime + d.duration) * 1000);
        d.startSeconds = d.startTime;
        d.startTime = new Date(+d.startTime * 1000);
    });

    maxDuration = d3.max(graph.nodes, function(d) {
        return d.duration;
    })

    x.domain([new Date(0), d3.max(graph.nodes, function(d) {
        return d.endTime;
    })]);

    currentGraph = graph;//jQuery.extend({}, graph);

    updateDimensions();
    update();

}

function partGraph(currentTimeSeconds) {
    var localComplete = jQuery.extend({}, fullGraph);
    //var localComplete = fullGraph.slice();
    var partNodes = [], partLinks = [];

    fullGraph.nodes.forEach(function(d) {
        if (d.startSeconds <= currentTimeSeconds) {
          console.log(d);
          partNodes.push(d);
        }
    });
    
    fullGraph.links.forEach(function(d) {
        if ((d.source.startSeconds <= currentTimeSeconds) && (d.target.startSeconds <= currentTimeSeconds)) {
          partLinks.push(d);
        }
    });

    // var partNodes = fullGraph.nodes.filter(function(d) {
    //     return d.startSeconds <= currentTimeSeconds;
    // });

    // var partLinks = fullGraph.links.filter(function(d) {
    //     return (d.source.startSeconds <= currentTimeSeconds) && (d.target.startSeconds <= currentTimeSeconds);
    // });
    

    currentGraph = {"links":partLinks,"nodes":partNodes};

    update();
    
}

var link = soundcellVis.append("g")
    .attr("class", "links")
    .selectAll("path");

var node = soundcellVis.append("g")
    .attr("class", "nodes")
    .selectAll("circle");

function update() {

    xAxisVis.call(xAxis)
        .selectAll("text")
        .style("text-anchor", "start")
        .style("fill", "white")
        .attr("dx", "0")
        .attr("dy", "1em");

    //.attr("stroke-width", function(d) { return Math.sqrt(d.value); });


    var t = d3.transition().duration(750);

    node = node.data(currentGraph.nodes);
    

node.exit().transition().duration(150)
      .attr("r", 0)
      .remove();

    node = node.enter().append("g")
        .attr("class", "node")
        .append("circle").call(function(node) { node.transition().duration(100); })
        .merge(node)
        .attr("r", nodeRadius)
        .attr("fill", function(d) {
            if (d.group == 1) {
                return 'rgb(20,20,20)';
            } else {
                return color(d.lineage);
            }
        })
        .style("stroke", function(d) {
            if (d.group == 1) {
                return color(d.lineage);
            } else {
                return 'rgb(20,20,20)';
            }
        });

    node.on("mouseover", nodeMouseover)
        .on("mouseout", nodeMouseout)
        .call(d3.drag()
            .on("start", dragstarted)
            .on("drag", dragged)
            .on("end", dragended));

    link = link.data(currentGraph.links);
    link.exit().remove();
    link = link.enter().append("path").merge(link);

    simulation.nodes(currentGraph.nodes);
    simulation.force("link").links(currentGraph.links);

    node.each(function(d) {
        d.connectedNodes = [d]
        link.each(function(l) {
            if (l.source.lineage == d.lineage || l.target.lineage == d.lineage) {
                if ($.inArray(l.source, d.connectedNodes) == -1) {
                    d.connectedNodes.push(l.source);
                }
                if ($.inArray(l.target, d.connectedNodes) == -1) {
                    d.connectedNodes.push(l.target);
                }
            }
        });
    });


    simulation.alpha(1).restart();

    // if (AlignActivated){
    //   simulation.force("forceY", forceY);
    //     simulation.force("forceX", forceX);
    // }
    //toggleVis(AlignActivated);
}


function nodeMouseover(m) {

    var lineage = m.lineage;

    d3.selectAll(".node").selectAll("circle")
        .each(function(d) {

            if ($.inArray(d, m.connectedNodes) > -1) {
                d3.select(this).transition().duration(150).attr("opacity", 1.0);
            } else {
                d3.select(this).transition().duration(150).attr("opacity", 0.1);
            }
        });

    d3.selectAll(".links").selectAll("path")
        .each(function(d) {

            if (d.source.lineage == lineage || d.target.lineage == lineage) {
                d3.select(this).transition().duration(100).attr("opacity", 1.0);
            } else {
                d3.select(this).transition().duration(100).attr("opacity", 0.2);
            }

        });
}

function nodeMouseout() {
    d3.selectAll(".node").selectAll("circle").transition().duration(250).attr("opacity", 1.0);
    d3.selectAll(".links").selectAll("path").transition().duration(250).attr("opacity", 1.0);
}

function updateDimensions() {

    width = window.innerWidth - margin.right;
    height = window.innerHeight - $('svg').offset().top - 10;

    svg
        .attr('width', width)
        .attr('height', height);


    x.range([margin.left, width - margin.right]);

    xAxisVis.call(xAxis)
        .attr("transform", "translate(0," + (height - axisHeight - margin.bottom) + ")");

    if (AlignActivated) {
        simulation.force("forceY", forceY);
        simulation.force("forceX", forceX);
    } else {
        simulation.force("center", d3.forceCenter(width / 2, height / 2));
    }

}

var line = d3.line()
    .curve(d3.curveBundle.beta(0.98));


d3.select(window).on('resize.updatesvg', updateDimensions);
updateDimensions();






function ticked() {

    link.attr("d", function(d) {
        var s = [],
            t = [],
            m = [],
            dp1 = [],
            dp2 = [];

        s.x = Math.max(radius, Math.min(width - radius, d.source.x));
        s.y = Math.max(radius, Math.min(height - radius - axisHeight - 30, d.source.y));

        t.x = Math.max(radius, Math.min(width - radius, d.target.x));
        t.y = Math.max(radius, Math.min(height - radius - axisHeight - 30, d.target.y));

        m.x = s.x + (t.x - s.x) / 2;
        m.y = s.y + (t.y - s.y) / 2;

        dp1.x = s.x;
        dp1.y = (s.y + m.y) / 2;

        dp2.x = t.x;
        dp2.y = (t.y + m.y) / 2;

        if (!AlignActivated) {
            return line([
                [s.x, s.y],
                [t.x, t.y]
            ]);
        }

        return line([
            [s.x, s.y],
            [dp1.x, dp1.y],
            [m.x, m.y],
            [dp2.x, dp2.y],
            [t.x, t.y]
        ]);

        var dx = d.target.x - d.source.x,
            dy = d.target.y - d.source.y,
            dr = 2.5 * Math.sqrt(dx * dx + dy * dy);
        return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;


    });



    //link.attr("d", line([[d.source.x,d.source.y],[dp1.x,dp1.y],[m.x,m.y],[dp2.x,dp2.y],[d.target.x,d.target.y]]));


    node.attr("cx", function(d) {
            return d.x = Math.max(radius, Math.min(width - radius, d.x));
        })
        .attr("cy", function(d) {
            return d.y = Math.max(radius, Math.min(height - radius - axisHeight - 30, d.y));
        });


    // node
    //     .attr("cx", function(d) { return d.x; })
    //     .attr("cy", function(d) { return d.y; });

    //  labels
    // .attr("dx", function(d) { return d.x + 20; })
    //    .attr("dy", function(d) { return d.y; });
}


function dragstarted(d) {
    if (!AlignActivated) {
        if (!d3.event.active) simulation.alphaTarget(0.4).restart();
        d.fx = d.x;
        d.fy = d.y;
    }
}

function dragged(d) {
    if (!AlignActivated) {
        d.fx = d3.event.x;
        d.fy = d3.event.y;
    }
}

function dragended(d) {
    if (!AlignActivated) {
        if (!d3.event.active) simulation.alphaTarget(alphaTarget);
        d.fx = null;
        d.fy = null;
    }
}
</script>
